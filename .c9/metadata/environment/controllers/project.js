{"filter":false,"title":"project.js","tooltip":"/controllers/project.js","ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":12,"column":22},"end":{"row":12,"column":22},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"hash":"3d16d796b127e381048635f8ed242cb008a5e3a3","undoManager":{"mark":31,"position":31,"stack":[[{"start":{"row":0,"column":0},"end":{"row":296,"column":1},"action":"insert","lines":["/* Controller */","const User      = require(\"../models\").user;","const Group     = require(\"../models\").group;","const crypto    = require('crypto');","const utils     = require('../dist/utils.js');","const jwtObj    = require(\"../config/config-jwt\");","const { Op }    = require(\"sequelize\");","const jwt       = require('jsonwebtoken');","","module.exports = {","  // 이메일로 유저 조회","  // Param : mrChuDB.users.email","  one(req, res) {","    if(utils.uk(req.query.email) == \"\")","      return res.send(utils.successFalse(null, \"email is required!\", 901));","    return User","      .findOne({ ","          where: {email: utils.uk(req.query.email)},","          attributes: ['id', 'name', 'phone', 'email', 'createdAt']","        })","      .then(user => res.send(utils.successTure(user)))","      .catch(error => {","        console.log(error);","        res.status(500).send(utils.successFalse(error, null, 500))","      });","  },","  ","  list(req, res) {","    return User","      .findAndCountAll({","        attributes: {exclude: ['password', 'salt']}","      })","      .then(user => {","        res.status(200).send(utils.successTure(user));","      })","      .catch(error => {","        console.log(error);","        res.status(500).send(utils.successFalse(error, null, 500))","      });","  },","  ","  // 회원가입","  // Param : mrChuDB.users.name, password, email, phone","  add(req, res) {","    const params = [utils.uk(req.body.params.name), ","      utils.uk(req.body.params.password), ","      utils.uk(req.body.params.email), ","      utils.uk(req.body.params.phone)","    ];","    let emptyValue = \"\";","    params.forEach(function(v, k) {","      if(v == \"\" && k == 0) emptyValue = \"name\"","      else if(v == \"\" && k == 1) emptyValue = \"password\"","      else if(v == \"\" && k == 2) emptyValue = \"email\"","      else if(v == \"\" && k == 3) emptyValue = \"phone\"","    });","    ","    if(utils.uk(emptyValue) != \"\")  // 회원가입에 필요한 데이터 전달받지 못함","      // return res.status(901).send(utils.successFalse(null, `Undefined ${emptyValue}`, 901));","      return res.send(utils.successFalse(null, `Undefined ${emptyValue}`, 901));","    else {","      return User.findAll({","        where: {email: utils.uk(req.body.params.email)}","        })","        .then(user => {","          if(user.length > 0){","            return res.send(utils.successFalse(null, \"Already a Email\", 902));  ","          }","          else {","            let key = utils.pbkdf2AsyncNonSalt(crypto, req.body.params.password);","            key.then((successMessage) => {","              return User","                .create({","                  name:     req.body.params.name,","                  password: successMessage.key,","                  email:    req.body.params.email,","                  phone:    req.body.params.phone,","                  salt:     successMessage.salt","                })","                .then(user   => res.status(200).send(utils.successTure(\"SignUp Success..\")))","                .catch(error => {","                  console.log(error);","                  res.status(500).send(utils.successFalse(error, null, 500))","                });","            });  ","          }","        })","        .catch(error => {","          console.log(error);","          res.status(500).send(utils.successFalse(error, null, 500))","        });","    }","  },","  ","  // 소셜 회원가입","  socialAdd(req, res) {","    const params = [utils.uk(req.body.params.name), ","      utils.uk(req.body.params.email), ","      utils.uk(req.body.params.userID)","    ]","    let emptyValue = \"\"","    ","    params.forEach((v, k) => {","      if(v == \"\" && k == 0) emptyValue = \"name\"","      else if(v == \"\" && k == 1) emptyValue = \"email\"","      else if(v == \"\" && k == 2) emptyValue = \"userID\"","    })","    ","    if(utils.uk(emptyValue) != \"\")  // 회원가입에 필요한 데이터 전달받지 못함","      return res.send(utils.successFalse(null, `Undefined ${emptyValue}`, 901));","    else {","      User.findAll({","        where: {email: utils.uk(req.body.params.email)}","      })","      .then(user => {","        if(user.length > 0){","          return res.send(utils.successFalse(null, \"Already a Email\", 902));","        }","        else {","            return User.create({","                name:           req.body.params.name,","                email:          req.body.params.email,","                type:           1,","                social_user_id: req.body.params.userID","            })","            .then(user   => res.status(200).send(utils.successTure(req.body)))","            .catch(error => {","              console.log(error);","              res.status(500).send(utils.successFalse(error, null, 500))","            })","        }","      })","      .catch(error => {","        console.log(error);","        res.status(500).send(utils.successFalse(error, null, 500))","      });","    }","  },","  ","  // 회원정보 수정","  // Param : mrChuDB.users.email, name, phone","  update(req, res) {","    const params = [utils.uk(req.body.params.name), utils.uk(req.body.params.phone)];","    let emptyValue = \"\";","    params.forEach(function(v, k) {","      if(v == \"\" && k == 0) emptyValue = \"name\";","      else if(v == \"\" && k == 1) emptyValue = \"phone\";","    });","    if(utils.uk(emptyValue) != \"\")","      return res.send(utils.successFalse(null, `Undefined ${emptyValue}`, 901));","","    User.update(","      {","        name:   req.body.params.name,","        phone:  req.body.params.phone","      },","      {","        where: { ","          email:   req.decoded.email","        }","      }","    )","    .then(user => res.status(200).send(utils.successTure(user)))","    .catch(error => {","      console.log(error);","      res.status(500).send(utils.successFalse(error, null, 500))","    })","  },","  ","  // 유저 탈퇴","  // Param : mrChuDB.users.id","  delete(req, res) {","    return User","      .findByPk(req.decoded.id, {exclude: ['password', 'salt']})","      .then(user => {","        if (!user) ","          return res.send(utils.successFalse(null, \"not found user\", 900));","          ","        return user","          .update({ status: 0})","          .then(() => res.status(200).send(utils.successTure(null)))","          .catch(error => {","            console.log(error);","            res.status(500).send(utils.successFalse(error, null, 500))","          });","      })","      .catch(error => {","        console.log(error);","        res.status(500).send(utils.successFalse(error, null, 500))","      });","  },","  ","  // 로컬 로그인","  // Param : mrChuDB.users.email, password","  login(req, res) {","    if(utils.uk(req.query.email) == \"\" || utils.uk(req.query.password) == \"\")","      return res.send(utils.successFalse(null, `required! paramter`, 901));","      ","    return User","      .findOne({","        where: {email:req.query.email}","      })","      .then(user => {","        if (!user)","          return res.send(utils.successFalse(null, \"Email Confirmation does not matched\", 900));","        ","        let key = utils.pbkdf2Async(crypto, user.salt, req.query.password);","        key.then((successMessage) => {","          if(successMessage.key != user.password)","            return res.send(utils.successFalse(null, \"Password Confirmation does not matched\", 901));","          else {","            var payload = {","              id :    user.id,","              email : user.email,","              name :  user.name,","              type:   'local'","            };","            var secretKey = jwtObj.secret;","            var options = {","              algorithm: \"HS512\",","              expiresIn: 600*100*30","            };   ","            ","            jwt.sign(payload, secretKey, options, (error, token) => {","              if(error){","                console.log(error);","                return res.status(500).send(utils.successFalse(error, null, error));","              } else","                // return res.status(200).send(utils.successTure(token));","                return res.status(200).send(utils.successTure(token))","            });","          }","        });","      })","      .catch(error => {","        console.log(error);","        res.status(500).send(utils.successFalse(error, null, 500));","      });","  },","  ","  // 소셜 로그인","  // email userID ","  socialLogin(req, res) {","    console.log(req.query.email)","    console.log(req.query.userID)","    if(utils.uk(req.query.email) == \"\" || utils.uk(req.query.userID) == \"\")","      return res.send(utils.successFalse(null, `required! paramter`, 901));","    ","    User.findOne({","      where: {","        email:            req.query.email,","        social_user_id :  req.query.userID","      }","    })","    .then(user => {","      if (!user)","        return res.send(utils.successFalse(null, \"Email Confirmation does not matched\", 900));","      // jwt 토큰 생성","      var payload = {","            id :    user.id,","            email : user.email,","            name :  user.name,","            type:   'social'","          };","      var secretKey = jwtObj.secret;","      var options = {","        algorithm: \"HS512\",","        expiresIn: 600*100*30","      };   ","          ","      jwt.sign(payload, secretKey, options, (error, token) => {","        if(error){","          console.log(error);","          return res.status(500).send(utils.successFalse(error));","        } else","          return res.status(200).send(utils.successTure(token));","      });","    })","    .catch(error => {","      console.log(error);","      res.status(500).send(utils.successFalse(error, null, 500));","    });","  },","  ","  async(req,res){","    return User","      .sync({force:true})","      .then(()=>{ ","        console.log(\"user sync success...\");","        return res.status(200).send();","      })","      .catch((error) => { ","        console.log(error);","        return res.status(500).send();","      });","  }","}"],"id":1}],[{"start":{"row":12,"column":0},"end":{"row":26,"column":2},"action":"remove","lines":["  one(req, res) {","    if(utils.uk(req.query.email) == \"\")","      return res.send(utils.successFalse(null, \"email is required!\", 901));","    return User","      .findOne({ ","          where: {email: utils.uk(req.query.email)},","          attributes: ['id', 'name', 'phone', 'email', 'createdAt']","        })","      .then(user => res.send(utils.successTure(user)))","      .catch(error => {","        console.log(error);","        res.status(500).send(utils.successFalse(error, null, 500))","      });","  },","  "],"id":2},{"start":{"row":11,"column":32},"end":{"row":12,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":26,"column":1},"end":{"row":280,"column":3},"action":"remove","lines":[" // 회원가입","  // Param : mrChuDB.users.name, password, email, phone","  add(req, res) {","    const params = [utils.uk(req.body.params.name), ","      utils.uk(req.body.params.password), ","      utils.uk(req.body.params.email), ","      utils.uk(req.body.params.phone)","    ];","    let emptyValue = \"\";","    params.forEach(function(v, k) {","      if(v == \"\" && k == 0) emptyValue = \"name\"","      else if(v == \"\" && k == 1) emptyValue = \"password\"","      else if(v == \"\" && k == 2) emptyValue = \"email\"","      else if(v == \"\" && k == 3) emptyValue = \"phone\"","    });","    ","    if(utils.uk(emptyValue) != \"\")  // 회원가입에 필요한 데이터 전달받지 못함","      // return res.status(901).send(utils.successFalse(null, `Undefined ${emptyValue}`, 901));","      return res.send(utils.successFalse(null, `Undefined ${emptyValue}`, 901));","    else {","      return User.findAll({","        where: {email: utils.uk(req.body.params.email)}","        })","        .then(user => {","          if(user.length > 0){","            return res.send(utils.successFalse(null, \"Already a Email\", 902));  ","          }","          else {","            let key = utils.pbkdf2AsyncNonSalt(crypto, req.body.params.password);","            key.then((successMessage) => {","              return User","                .create({","                  name:     req.body.params.name,","                  password: successMessage.key,","                  email:    req.body.params.email,","                  phone:    req.body.params.phone,","                  salt:     successMessage.salt","                })","                .then(user   => res.status(200).send(utils.successTure(\"SignUp Success..\")))","                .catch(error => {","                  console.log(error);","                  res.status(500).send(utils.successFalse(error, null, 500))","                });","            });  ","          }","        })","        .catch(error => {","          console.log(error);","          res.status(500).send(utils.successFalse(error, null, 500))","        });","    }","  },","  ","  // 소셜 회원가입","  socialAdd(req, res) {","    const params = [utils.uk(req.body.params.name), ","      utils.uk(req.body.params.email), ","      utils.uk(req.body.params.userID)","    ]","    let emptyValue = \"\"","    ","    params.forEach((v, k) => {","      if(v == \"\" && k == 0) emptyValue = \"name\"","      else if(v == \"\" && k == 1) emptyValue = \"email\"","      else if(v == \"\" && k == 2) emptyValue = \"userID\"","    })","    ","    if(utils.uk(emptyValue) != \"\")  // 회원가입에 필요한 데이터 전달받지 못함","      return res.send(utils.successFalse(null, `Undefined ${emptyValue}`, 901));","    else {","      User.findAll({","        where: {email: utils.uk(req.body.params.email)}","      })","      .then(user => {","        if(user.length > 0){","          return res.send(utils.successFalse(null, \"Already a Email\", 902));","        }","        else {","            return User.create({","                name:           req.body.params.name,","                email:          req.body.params.email,","                type:           1,","                social_user_id: req.body.params.userID","            })","            .then(user   => res.status(200).send(utils.successTure(req.body)))","            .catch(error => {","              console.log(error);","              res.status(500).send(utils.successFalse(error, null, 500))","            })","        }","      })","      .catch(error => {","        console.log(error);","        res.status(500).send(utils.successFalse(error, null, 500))","      });","    }","  },","  ","  // 회원정보 수정","  // Param : mrChuDB.users.email, name, phone","  update(req, res) {","    const params = [utils.uk(req.body.params.name), utils.uk(req.body.params.phone)];","    let emptyValue = \"\";","    params.forEach(function(v, k) {","      if(v == \"\" && k == 0) emptyValue = \"name\";","      else if(v == \"\" && k == 1) emptyValue = \"phone\";","    });","    if(utils.uk(emptyValue) != \"\")","      return res.send(utils.successFalse(null, `Undefined ${emptyValue}`, 901));","","    User.update(","      {","        name:   req.body.params.name,","        phone:  req.body.params.phone","      },","      {","        where: { ","          email:   req.decoded.email","        }","      }","    )","    .then(user => res.status(200).send(utils.successTure(user)))","    .catch(error => {","      console.log(error);","      res.status(500).send(utils.successFalse(error, null, 500))","    })","  },","  ","  // 유저 탈퇴","  // Param : mrChuDB.users.id","  delete(req, res) {","    return User","      .findByPk(req.decoded.id, {exclude: ['password', 'salt']})","      .then(user => {","        if (!user) ","          return res.send(utils.successFalse(null, \"not found user\", 900));","          ","        return user","          .update({ status: 0})","          .then(() => res.status(200).send(utils.successTure(null)))","          .catch(error => {","            console.log(error);","            res.status(500).send(utils.successFalse(error, null, 500))","          });","      })","      .catch(error => {","        console.log(error);","        res.status(500).send(utils.successFalse(error, null, 500))","      });","  },","  ","  // 로컬 로그인","  // Param : mrChuDB.users.email, password","  login(req, res) {","    if(utils.uk(req.query.email) == \"\" || utils.uk(req.query.password) == \"\")","      return res.send(utils.successFalse(null, `required! paramter`, 901));","      ","    return User","      .findOne({","        where: {email:req.query.email}","      })","      .then(user => {","        if (!user)","          return res.send(utils.successFalse(null, \"Email Confirmation does not matched\", 900));","        ","        let key = utils.pbkdf2Async(crypto, user.salt, req.query.password);","        key.then((successMessage) => {","          if(successMessage.key != user.password)","            return res.send(utils.successFalse(null, \"Password Confirmation does not matched\", 901));","          else {","            var payload = {","              id :    user.id,","              email : user.email,","              name :  user.name,","              type:   'local'","            };","            var secretKey = jwtObj.secret;","            var options = {","              algorithm: \"HS512\",","              expiresIn: 600*100*30","            };   ","            ","            jwt.sign(payload, secretKey, options, (error, token) => {","              if(error){","                console.log(error);","                return res.status(500).send(utils.successFalse(error, null, error));","              } else","                // return res.status(200).send(utils.successTure(token));","                return res.status(200).send(utils.successTure(token))","            });","          }","        });","      })","      .catch(error => {","        console.log(error);","        res.status(500).send(utils.successFalse(error, null, 500));","      });","  },","  ","  // 소셜 로그인","  // email userID ","  socialLogin(req, res) {","    console.log(req.query.email)","    console.log(req.query.userID)","    if(utils.uk(req.query.email) == \"\" || utils.uk(req.query.userID) == \"\")","      return res.send(utils.successFalse(null, `required! paramter`, 901));","    ","    User.findOne({","      where: {","        email:            req.query.email,","        social_user_id :  req.query.userID","      }","    })","    .then(user => {","      if (!user)","        return res.send(utils.successFalse(null, \"Email Confirmation does not matched\", 900));","      // jwt 토큰 생성","      var payload = {","            id :    user.id,","            email : user.email,","            name :  user.name,","            type:   'social'","          };","      var secretKey = jwtObj.secret;","      var options = {","        algorithm: \"HS512\",","        expiresIn: 600*100*30","      };   ","          ","      jwt.sign(payload, secretKey, options, (error, token) => {","        if(error){","          console.log(error);","          return res.status(500).send(utils.successFalse(error));","        } else","          return res.status(200).send(utils.successTure(token));","      });","    })","    .catch(error => {","      console.log(error);","      res.status(500).send(utils.successFalse(error, null, 500));","    });","  },","  ","  async(req,res){","    return User","      .sync({force:true})","      .then(()=>{ ","        console.log(\"user sync success...\");","        return res.status(200).send();","      })","      .catch((error) => { ","        console.log(error);","        return res.status(500).send();","      });","  }"],"id":3}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":45},"action":"remove","lines":["const Group     = require(\"../models\").group;"],"id":4},{"start":{"row":1,"column":44},"end":{"row":2,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":12,"column":3},"end":{"row":22,"column":9},"action":"remove","lines":[" return User","      .findAndCountAll({","        attributes: {exclude: ['password', 'salt']}","      })","      .then(user => {","        res.status(200).send(utils.successTure(user));","      })","      .catch(error => {","        console.log(error);","        res.status(500).send(utils.successFalse(error, null, 500))","      });"],"id":5},{"start":{"row":12,"column":3},"end":{"row":32,"column":10},"action":"insert","lines":["User.findAll({","            include: { ","                model: Friend,","                on: {","                    sender_id:    {[Op.col]: 'user.id'}","                },","                where: {","                    receiver_id:    req.decoded.id,","                    status:         0","                },","                attributes: ['createdAt', 'updatedAt', ['id', 'friend_id']]","            },","            attributes: ['id', 'name', 'phone', 'email']","        })","        .then(reqUsers => {","            return res.status(200).send(utils.successTure(reqUsers));","        })","        .catch(error => {","            console.log(error);","            return res.status(500).send(utils.successFalse(error, null, 500));","        })"]}],[{"start":{"row":13,"column":0},"end":{"row":13,"column":4},"action":"remove","lines":["    "],"id":6},{"start":{"row":14,"column":0},"end":{"row":14,"column":4},"action":"remove","lines":["    "]},{"start":{"row":15,"column":0},"end":{"row":15,"column":4},"action":"remove","lines":["    "]},{"start":{"row":16,"column":0},"end":{"row":16,"column":4},"action":"remove","lines":["    "]},{"start":{"row":17,"column":0},"end":{"row":17,"column":4},"action":"remove","lines":["    "]},{"start":{"row":18,"column":0},"end":{"row":18,"column":4},"action":"remove","lines":["    "]},{"start":{"row":19,"column":0},"end":{"row":19,"column":4},"action":"remove","lines":["    "]},{"start":{"row":20,"column":0},"end":{"row":20,"column":4},"action":"remove","lines":["    "]},{"start":{"row":21,"column":0},"end":{"row":21,"column":4},"action":"remove","lines":["    "]},{"start":{"row":22,"column":0},"end":{"row":22,"column":4},"action":"remove","lines":["    "]},{"start":{"row":23,"column":0},"end":{"row":23,"column":4},"action":"remove","lines":["    "]},{"start":{"row":24,"column":0},"end":{"row":24,"column":4},"action":"remove","lines":["    "]},{"start":{"row":25,"column":0},"end":{"row":25,"column":4},"action":"remove","lines":["    "]},{"start":{"row":26,"column":0},"end":{"row":26,"column":4},"action":"remove","lines":["    "]},{"start":{"row":27,"column":0},"end":{"row":27,"column":4},"action":"remove","lines":["    "]},{"start":{"row":28,"column":0},"end":{"row":28,"column":4},"action":"remove","lines":["    "]},{"start":{"row":29,"column":0},"end":{"row":29,"column":4},"action":"remove","lines":["    "]},{"start":{"row":30,"column":0},"end":{"row":30,"column":4},"action":"remove","lines":["    "]},{"start":{"row":31,"column":0},"end":{"row":31,"column":4},"action":"remove","lines":["    "]},{"start":{"row":32,"column":0},"end":{"row":32,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":1,"column":39},"end":{"row":1,"column":43},"action":"remove","lines":["user"],"id":7},{"start":{"row":1,"column":39},"end":{"row":1,"column":40},"action":"insert","lines":["p"]},{"start":{"row":1,"column":40},"end":{"row":1,"column":41},"action":"insert","lines":["r"]},{"start":{"row":1,"column":41},"end":{"row":1,"column":42},"action":"insert","lines":["o"]},{"start":{"row":1,"column":42},"end":{"row":1,"column":43},"action":"insert","lines":["j"]},{"start":{"row":1,"column":43},"end":{"row":1,"column":44},"action":"insert","lines":["e"]},{"start":{"row":1,"column":44},"end":{"row":1,"column":45},"action":"insert","lines":["c"]},{"start":{"row":1,"column":45},"end":{"row":1,"column":46},"action":"insert","lines":["t"]}],[{"start":{"row":1,"column":6},"end":{"row":1,"column":10},"action":"remove","lines":["User"],"id":8},{"start":{"row":1,"column":6},"end":{"row":1,"column":7},"action":"insert","lines":["P"]},{"start":{"row":1,"column":7},"end":{"row":1,"column":8},"action":"insert","lines":["r"]},{"start":{"row":1,"column":8},"end":{"row":1,"column":9},"action":"insert","lines":["o"]},{"start":{"row":1,"column":9},"end":{"row":1,"column":10},"action":"insert","lines":["j"]},{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"insert","lines":["w"]},{"start":{"row":1,"column":11},"end":{"row":1,"column":12},"action":"insert","lines":["e"]}],[{"start":{"row":1,"column":11},"end":{"row":1,"column":12},"action":"remove","lines":["e"],"id":9},{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"remove","lines":["w"]}],[{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"insert","lines":["e"],"id":10},{"start":{"row":1,"column":11},"end":{"row":1,"column":12},"action":"insert","lines":["c"]},{"start":{"row":1,"column":12},"end":{"row":1,"column":13},"action":"insert","lines":["t"]}],[{"start":{"row":1,"column":17},"end":{"row":1,"column":18},"action":"remove","lines":[" "],"id":11},{"start":{"row":1,"column":16},"end":{"row":1,"column":17},"action":"remove","lines":[" "]},{"start":{"row":1,"column":15},"end":{"row":1,"column":16},"action":"remove","lines":[" "]}],[{"start":{"row":12,"column":3},"end":{"row":12,"column":7},"action":"remove","lines":["User"],"id":12},{"start":{"row":12,"column":3},"end":{"row":12,"column":10},"action":"insert","lines":["Project"]}],[{"start":{"row":13,"column":9},"end":{"row":23,"column":10},"action":"remove","lines":["nclude: { ","            model: Friend,","            on: {","                sender_id:    {[Op.col]: 'user.id'}","            },","            where: {","                receiver_id:    req.decoded.id,","                status:         0","            },","            attributes: ['createdAt', 'updatedAt', ['id', 'friend_id']]","        },"],"id":13},{"start":{"row":13,"column":8},"end":{"row":13,"column":9},"action":"remove","lines":["i"]}],[{"start":{"row":13,"column":8},"end":{"row":15,"column":13},"action":"insert","lines":["where: {","                master_id: req.decoded.id","            }"],"id":14}],[{"start":{"row":16,"column":0},"end":{"row":17,"column":0},"action":"remove","lines":["        attributes: ['id', 'name', 'phone', 'email']",""],"id":15}],[{"start":{"row":15,"column":8},"end":{"row":15,"column":12},"action":"remove","lines":["    "],"id":16}],[{"start":{"row":14,"column":8},"end":{"row":14,"column":12},"action":"remove","lines":["    "],"id":17}],[{"start":{"row":14,"column":12},"end":{"row":14,"column":13},"action":"remove","lines":["m"],"id":18},{"start":{"row":14,"column":12},"end":{"row":14,"column":13},"action":"remove","lines":["a"]},{"start":{"row":14,"column":12},"end":{"row":14,"column":13},"action":"remove","lines":["s"]},{"start":{"row":14,"column":12},"end":{"row":14,"column":13},"action":"remove","lines":["t"]},{"start":{"row":14,"column":12},"end":{"row":14,"column":13},"action":"remove","lines":["e"]},{"start":{"row":14,"column":12},"end":{"row":14,"column":13},"action":"remove","lines":["r"]},{"start":{"row":14,"column":12},"end":{"row":14,"column":13},"action":"remove","lines":["_"]},{"start":{"row":14,"column":12},"end":{"row":14,"column":13},"action":"remove","lines":["i"]},{"start":{"row":14,"column":12},"end":{"row":14,"column":13},"action":"remove","lines":["d"]}],[{"start":{"row":14,"column":12},"end":{"row":14,"column":13},"action":"insert","lines":["p"],"id":19},{"start":{"row":14,"column":13},"end":{"row":14,"column":14},"action":"insert","lines":["r"]},{"start":{"row":14,"column":14},"end":{"row":14,"column":15},"action":"insert","lines":["o"]},{"start":{"row":14,"column":15},"end":{"row":14,"column":16},"action":"insert","lines":["j"]},{"start":{"row":14,"column":16},"end":{"row":14,"column":17},"action":"insert","lines":["e"]},{"start":{"row":14,"column":17},"end":{"row":14,"column":18},"action":"insert","lines":["c"]},{"start":{"row":14,"column":18},"end":{"row":14,"column":19},"action":"insert","lines":["t"]},{"start":{"row":14,"column":19},"end":{"row":14,"column":20},"action":"insert","lines":["_"]},{"start":{"row":14,"column":20},"end":{"row":14,"column":21},"action":"insert","lines":["i"]},{"start":{"row":14,"column":21},"end":{"row":14,"column":22},"action":"insert","lines":["d"]}],[{"start":{"row":14,"column":34},"end":{"row":14,"column":35},"action":"remove","lines":["d"],"id":20},{"start":{"row":14,"column":33},"end":{"row":14,"column":34},"action":"remove","lines":["e"]},{"start":{"row":14,"column":32},"end":{"row":14,"column":33},"action":"remove","lines":["d"]},{"start":{"row":14,"column":31},"end":{"row":14,"column":32},"action":"remove","lines":["o"]},{"start":{"row":14,"column":30},"end":{"row":14,"column":31},"action":"remove","lines":["c"]},{"start":{"row":14,"column":29},"end":{"row":14,"column":30},"action":"remove","lines":["e"]},{"start":{"row":14,"column":28},"end":{"row":14,"column":29},"action":"remove","lines":["d"]},{"start":{"row":14,"column":27},"end":{"row":14,"column":28},"action":"remove","lines":["."]}],[{"start":{"row":17,"column":10},"end":{"row":17,"column":18},"action":"remove","lines":["reqUsers"],"id":21},{"start":{"row":17,"column":10},"end":{"row":17,"column":11},"action":"insert","lines":["p"]},{"start":{"row":17,"column":11},"end":{"row":17,"column":12},"action":"insert","lines":["r"]},{"start":{"row":17,"column":12},"end":{"row":17,"column":13},"action":"insert","lines":["o"]},{"start":{"row":17,"column":13},"end":{"row":17,"column":14},"action":"insert","lines":["j"]},{"start":{"row":17,"column":14},"end":{"row":17,"column":15},"action":"insert","lines":["e"]},{"start":{"row":17,"column":15},"end":{"row":17,"column":16},"action":"insert","lines":["c"]}],[{"start":{"row":17,"column":16},"end":{"row":17,"column":17},"action":"insert","lines":["t"],"id":22},{"start":{"row":17,"column":17},"end":{"row":17,"column":18},"action":"insert","lines":["D"]},{"start":{"row":17,"column":18},"end":{"row":17,"column":19},"action":"insert","lines":["a"]},{"start":{"row":17,"column":19},"end":{"row":17,"column":20},"action":"insert","lines":["t"]},{"start":{"row":17,"column":20},"end":{"row":17,"column":21},"action":"insert","lines":["a"]}],[{"start":{"row":18,"column":54},"end":{"row":18,"column":62},"action":"remove","lines":["reqUsers"],"id":23},{"start":{"row":18,"column":54},"end":{"row":18,"column":65},"action":"insert","lines":["projectData"]}],[{"start":{"row":12,"column":10},"end":{"row":12,"column":11},"action":"insert","lines":["."],"id":24}],[{"start":{"row":12,"column":11},"end":{"row":12,"column":26},"action":"insert","lines":["projectDocument"],"id":25}],[{"start":{"row":1,"column":47},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":26}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":49},"action":"insert","lines":["const Group         = require(\"../models\").group;"],"id":27}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":49},"action":"remove","lines":["const Group         = require(\"../models\").group;"],"id":28},{"start":{"row":1,"column":47},"end":{"row":2,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1,"column":6},"end":{"row":1,"column":7},"action":"remove","lines":["P"],"id":29}],[{"start":{"row":1,"column":6},"end":{"row":1,"column":7},"action":"insert","lines":["p"],"id":30}],[{"start":{"row":1,"column":13},"end":{"row":1,"column":14},"action":"insert","lines":["D"],"id":31},{"start":{"row":1,"column":14},"end":{"row":1,"column":15},"action":"insert","lines":["o"]},{"start":{"row":1,"column":15},"end":{"row":1,"column":16},"action":"insert","lines":["c"]},{"start":{"row":1,"column":16},"end":{"row":1,"column":17},"action":"insert","lines":["u"]},{"start":{"row":1,"column":17},"end":{"row":1,"column":18},"action":"insert","lines":["m"]},{"start":{"row":1,"column":18},"end":{"row":1,"column":19},"action":"insert","lines":["e"]},{"start":{"row":1,"column":19},"end":{"row":1,"column":20},"action":"insert","lines":["n"]},{"start":{"row":1,"column":20},"end":{"row":1,"column":21},"action":"insert","lines":["t"]}],[{"start":{"row":12,"column":3},"end":{"row":12,"column":11},"action":"remove","lines":["Project."],"id":32}]]},"timestamp":1598431229827}