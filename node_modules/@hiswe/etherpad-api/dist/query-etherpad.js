'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var request = _interopDefault(require('request-promise-native'));
var createError = _interopDefault(require('http-errors'));
var util = require('util');
var compareVersions = _interopDefault(require('compare-versions'));
var isUrl = _interopDefault(require('is-url'));
var url = require('url');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function isString(text) {
    return typeof text === `string` && text.length > 0;
}
function isApiKey(apiKey) {
    return /^[a-f\d]{64}$/.test(apiKey);
}
function isVersion(version) {
    return /^\d+\.\d+\.\d+$/.test(version);
}
function isInteger(num) {
    return Number.isInteger(num);
}
function buildEtherpadUrl(config) {
    const ETHERPAD_URL = new url.URL(config.url);
    ETHERPAD_URL.pathname = `api/${config.apiVersion}`;
    return ETHERPAD_URL.toString();
}
// can test both ETIMEDOUT & ESOCKETTIMEDOUT
function isTimeout(error) {
    return /TIMEDOUT/.test((error.error && error.error.code) || error.code);
}
function isConnectionRefused(error) {
    return /ECONNREFUSED/.test((error.error && error.error.code) || error.code);
}

const defaultConfiguration = Object.freeze({
    timeout: 1000,
    apiVersion: `1.2.13`,
    url: `http://0.0.0.0:9001`,
    apiKey: `0000000000000000000000000000000000000000000000000000000000000000`,
});
const messages = {
    noConfig: `Etherpad configuration is mandatory`,
    noApiKey: `Etherpad api key need to be a string`,
    invalidApiKey: `Etherpad api key is invalid`,
    invalidUrl: `Etherpad url is invalid`,
    invalidVersion: `Etherpad version is invalid`,
};
function getConfiguration(config) {
    if (typeof config !== `object`)
        throw new Error(messages.noConfig);
    if (!isString(config.apiKey))
        throw new Error(messages.noApiKey);
    if (!isApiKey(config.apiKey))
        throw new Error(messages.invalidApiKey);
    const url$$1 = isString(config.url)
        ? config.url.trim()
        : defaultConfiguration.url;
    if (!isUrl(url$$1))
        throw new Error(messages.invalidUrl);
    const apiVersion = isString(config.apiVersion)
        ? config.apiVersion.trim()
        : defaultConfiguration.apiVersion;
    if (!isVersion(apiVersion))
        throw new Error(messages.invalidVersion);
    const securedConfig = {
        url: url$$1,
        apiVersion,
        apiKey: config.apiKey.trim(),
        timeout: isInteger(config.timeout)
            ? config.timeout
            : defaultConfiguration.timeout,
    };
    return securedConfig;
}

const logger = util.debuglog(`etherpad`);
const err503Txt = `Etherpad is unavailable`;
// http://etherpad.org/doc/v1.7.0/#index_response_format
const etherpadErrorCodes = {
    1: 422,
    2: 500,
    3: 501,
    4: 422,
};
class Etherpad {
    constructor(config) {
        // make sure we have an instance even if we forgot the “new” keyword
        if (!(this instanceof Etherpad)) {
            return new Etherpad(config);
        }
        config = getConfiguration(config);
        this._apiUrl = buildEtherpadUrl(config);
        this._timeout = config.timeout;
        this._apiVersion = config.apiVersion;
        this._apiKey = config.apiKey;
    }
    _getParams(method, qs = {}) {
        const options = {
            uri: `${this._apiUrl}/${method}`,
            json: true,
            timeout: this._timeout,
            qs: Object.assign({}, qs, { apikey: this._apiKey }),
        };
        return options;
    }
    _query(method, qs = {}, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = this._getParams(method, qs);
            try {
                // EtherpadResponse
                const body = (yield request(params));
                // body.code = +body.code
                if (body.code === 0)
                    return body.data;
                // silence etherpad error
                // ex: when wanting to know if a pad exist we might query it to check
                //     response will be bad be it's not an error per se
                if (!throwOnEtherpadError)
                    return body.data;
                logger(`${method} doesn't work properly`, qs);
                const code = etherpadErrorCodes[body.code];
                const message = body.message;
                logger(util.inspect(body, { colors: true }));
                const error = createError(code, message);
                throw error;
            }
            catch (error) {
                // All failed requests are handled here with request-promise-*
                // https://www.npmjs.com/package/request-promise#rejected-promises-and-the-simple-option
                logger(error);
                if (isTimeout(error))
                    throw createError(408);
                if (isConnectionRefused(error))
                    throw createError(503, err503Txt);
                throw createError(error.statusCode, error.message || error.statusMessage);
            }
        });
    }
    _checkVersion(methodVersion) {
        const result = compareVersions(this._apiVersion, methodVersion);
        if (result < 0) {
            const message = `Not implemented in Etherpad API v${this._apiVersion}. You should upgrade to >=v${methodVersion}`;
            throw createError(501, message);
        }
    }
    ////////
    // GROUPS
    ////////
    createGroup(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`createGroup`, qs, throwOnEtherpadError);
        });
    }
    createGroupIfNotExistsFor(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`createGroupIfNotExistsFor`, qs, throwOnEtherpadError);
        });
    }
    deleteGroup(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`deleteGroup`, qs, throwOnEtherpadError);
        });
    }
    listPads(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`listPads`, qs, throwOnEtherpadError);
        });
    }
    createGroupPad(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`createGroupPad`, qs, throwOnEtherpadError);
        });
    }
    listAllGroups(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`listAllGroups`, qs, throwOnEtherpadError);
        });
    }
    ////////
    // AUTHOR
    ////////
    createAuthor(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`createAuthor`, qs, throwOnEtherpadError);
        });
    }
    createAuthorIfNotExistsFor(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`createAuthorIfNotExistsFor`, qs, throwOnEtherpadError);
        });
    }
    listPadsOfAuthor(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`listPadsOfAuthor`, qs, throwOnEtherpadError);
        });
    }
    getAuthorName(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.1.0`);
            return this._query(`getAuthorName`, qs, throwOnEtherpadError);
        });
    }
    ////////
    // SESSION
    ////////
    createSession(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`createSession`, qs, throwOnEtherpadError);
        });
    }
    deleteSession(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`deleteSession`, qs, throwOnEtherpadError);
        });
    }
    getSessionInfo(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`getSessionInfo`, qs, throwOnEtherpadError);
        });
    }
    listSessionsOfGroup(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`listSessionsOfGroup`, qs, throwOnEtherpadError);
        });
    }
    listSessionsOfAuthor(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`listSessionsOfAuthor`, qs, throwOnEtherpadError);
        });
    }
    ////////
    // PAD CONTENT
    ////////
    getText(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`getText`, qs, throwOnEtherpadError);
        });
    }
    setText(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`setText`, qs, throwOnEtherpadError);
        });
    }
    appendText(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.13`);
            return this._query(`appendText`, qs, throwOnEtherpadError);
        });
    }
    getHTML(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`getHTML`, qs, throwOnEtherpadError);
        });
    }
    setHTML(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`setHTML`, qs, throwOnEtherpadError);
        });
    }
    getAttributePool(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.8`);
            return this._query(`getAttributePool`, qs, throwOnEtherpadError);
        });
    }
    getRevisionChangeset(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.8`);
            return this._query(`getRevisionChangeset`, qs, throwOnEtherpadError);
        });
    }
    createDiffHTML(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.7`);
            return this._query(`createDiffHTML`, qs, throwOnEtherpadError);
        });
    }
    restoreRevision(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.11`);
            return this._query(`restoreRevision`, qs, throwOnEtherpadError);
        });
    }
    ////////
    // CHAT
    ////////
    getChatHistory(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.7`);
            return this._query(`getChatHistory`, qs, throwOnEtherpadError);
        });
    }
    getChatHead(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.7`);
            return this._query(`getChatHead`, qs, throwOnEtherpadError);
        });
    }
    appendChatMessage(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.12`);
            return this._query(`appendChatMessage`, qs, throwOnEtherpadError);
        });
    }
    ////////
    // PAD
    ////////
    createPad(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`createPad`, qs, throwOnEtherpadError);
        });
    }
    getRevisionsCount(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`getRevisionsCount`, qs, throwOnEtherpadError);
        });
    }
    getSavedRevisionsCount(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.11`);
            return this._query(`getSavedRevisionsCount`, qs, throwOnEtherpadError);
        });
    }
    listSavedRevisions(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.11`);
            return this._query(`listSavedRevisions`, qs, throwOnEtherpadError);
        });
    }
    saveRevision(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.11`);
            return this._query(`saveRevision`, qs, throwOnEtherpadError);
        });
    }
    padUsersCount(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`padUsersCount`, qs, throwOnEtherpadError);
        });
    }
    padUsers(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.1.0`);
            return this._query(`padUsers`, qs, throwOnEtherpadError);
        });
    }
    deletePad(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`deletePad`, qs, throwOnEtherpadError);
        });
    }
    copyPad(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.8`);
            return this._query(`copyPad`, qs, throwOnEtherpadError);
        });
    }
    movePad(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.8`);
            return this._query(`movePad`, qs, throwOnEtherpadError);
        });
    }
    getReadOnlyID(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`getReadOnlyID`, qs, throwOnEtherpadError);
        });
    }
    getPadID(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.10`);
            return this._query(`getPadID`, qs, throwOnEtherpadError);
        });
    }
    setPublicStatus(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`setPublicStatus`, qs, throwOnEtherpadError);
        });
    }
    getPublicStatus(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`getPublicStatus`, qs, throwOnEtherpadError);
        });
    }
    setPassword(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`setPassword`, qs, throwOnEtherpadError);
        });
    }
    isPasswordProtected(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`isPasswordProtected`, qs, throwOnEtherpadError);
        });
    }
    listAuthorsOfPad(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`listAuthorsOfPad`, qs, throwOnEtherpadError);
        });
    }
    getLastEdited(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.0.0`);
            return this._query(`getLastEdited`, qs, throwOnEtherpadError);
        });
    }
    sendClientsMessage(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.1.0`);
            return this._query(`sendClientsMessage`, qs, throwOnEtherpadError);
        });
    }
    checkToken(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.0`);
            return this._query(`checkToken`, qs, throwOnEtherpadError);
        });
    }
    ////////
    // PADS
    ////////
    listAllPads(qs, throwOnEtherpadError = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this._checkVersion(`1.2.1`);
            return this._query(`listAllPads`, qs, throwOnEtherpadError);
        });
    }
}

module.exports = Etherpad;
